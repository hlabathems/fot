mcmc inference and other things
* straight data stream light curve 
* time delay

Guide of python scripts

Source files: these contain functions used in simulations

  drw_lightcurve.py
    It contains the functions that generate a light curve given quasar parameters sigma, tau, and b.

  qsr_ll.py
    This is a source file. This contains the hojjati and kelly likelihood functions for a single quasar light curve.

  hubble_observation_schedule.py
    This is a source file. It contains a function that provides a randmoized hubble-like schedule. It is not currently being used in any of the files but that will change.

  delayed_lightcurve.py
    The is a source file. It takes the observation schedule and image delay to produce two delayed lightcurves.  I still have to add the magnitude offset.

Tests and examples: these contain example applications and tests of the functions in the source files.

  test_drw_lightcurve.py
    This function tests the drw_lightcurve.py There are three tests. You can select which one to run at the bottom of the script.

  sim_lightcurve_examples.py
    This produces examples of simulated light curves using drw_lightcurve.py. 

  lightcurve_ll_plots.py
    This is a test function of qsr_ll.py It produces plots of the likelihood function for sigma and tau parameters for a simulated lightcurve using drw_lightcurve.py. This will be updated to produce triangle plots.

  emcee_light_curves.py
    emcee reconstruction of light curve parameters.

  test_delayed_lightcurve.py
    Provide examples of the functions in delayed_lightcurve.py.

  emcee_delays.py
    emcee reconstruction of delays, magnitude offsets, and light curve parameters.


Update by LAM, 4/5/14
Taking ARW's code and working to systematize it so that command-line 
control can help us do many runs in batch mode, taking advantage of 
the many cpus on nisus, etc.  The two routines in play right now are

fot_library.py which contains all key routines, and

fot_delay.py which is used to set up and run the inference on delays.

The syntax can be checked with

./fot_delay.py -h

Note that all output is directed to the new directory outputs.

Also note that this expects a new environment variable to be set, so
please put this in your ~/.login or ~/.cshrc file.  This is for a csh
environment variable, convert it to bash format if that's what you're
using.

setenv FOTDIR ~/research/projects/OMEGA/fot

A test run is shown here:

./fot_delay.py -i 'RXJ1131_Tewes2013.rdb' -l 'A' -m 'B' -s 0.1 -o 'testrun' > testrun.log & 

